{
  "stats": {
    "suites": 4,
    "tests": 2,
    "passes": 0,
    "pending": 0,
    "failures": 2,
    "start": "2018-07-26T07:45:45.624Z",
    "end": "2018-07-26T07:45:55.660Z",
    "duration": 10036,
    "testsRegistered": 28,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 3,
    "hasOther": true,
    "skipped": 26,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "39035cc8-fbc9-478e-a819-c01c42ee1b6e",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "2af0e0c5-26b2-4cf9-9fdc-28122a912006",
        "title": "测试ServerKey模型",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试ServerKey模型 \"before all\" hook",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_connectdb.dbConnection.then(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rlt) {\n        var port, isOccupied;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        if (!rlt) {\n                            _context.next = 8;\n                            break;\n                        }\n                        _registerModel.Models.forEach(function (model) {\n                            console.log(model.collectionName);\n                            _initApp2.default.use(_serverkey.validClient);\n                            (0, _api.generateRestFul)(model.collectionName, _initApp2.default, model);\n                        });\n                        port = 7001;\n                        _context.next = 5;\n                        return (0, _checkport.checkport)(port);\n                    case 5:\n                        isOccupied = _context.sent;\n                        if (!isOccupied) {\n                            _initApp2.default.listen(7001);\n                            console.log(\"测试地址在7001端口\");\n                        }\n                        done();\n                    case 8:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, undefined);\n    }));\n    return function (_x) {\n        return _ref.apply(this, arguments);\n    };\n}());",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "dd8873d2-282f-4d47-8ef2-d892605ec6d3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥",
            "fullTitle": "测试ServerKey模型 获取用户的公钥",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var uuid = (0, _v2.default)();\n_ServerKey2.default.genPublicKey(uuid, \"random\", {}, null).then(function (rlt) {\n    publicKey = rlt.publicKey;\n    var sign = rlt.sign;\n    var randomString = rlt.randomString;\n    var msgCiphered = rlt.msgCiphered;\n    if (_ed2.default.Verify(new Buffer(msgCiphered, 'utf8'), sign, publicKey)) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', publicKey, msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b00ed22c-dda2-4011-8b37-0ee216e4fb5e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试ServerKey的公钥生成方法",
            "fullTitle": "测试ServerKey模型 测试ServerKey的公钥生成方法",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done();",
            "err": {},
            "isRoot": false,
            "uuid": "554cb367-e974-47cc-9f15-a5a82a8f7c6f",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "b00ed22c-dda2-4011-8b37-0ee216e4fb5e",
          "554cb367-e974-47cc-9f15-a5a82a8f7c6f"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4f81d1a6-cf75-4a8d-8f8e-8f85a165987b",
        "title": "测试ServerKeyAPI",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥,并且验证",
            "fullTitle": "测试ServerKeyAPI 获取用户的公钥,并且验证",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n    publicKey = rlt.data.publicKey;\n    var sign = rlt.data.sign;\n    var randomString = rlt.data.randomString;\n    var msgCiphered = rlt.data.msgCiphered;\n    token = msgCiphered;\n    if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "b046e928-9e34-4d75-bb96-aea7fd8d5504",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "fullTitle": "测试ServerKeyAPI 用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/valid_token?uuid=\" + uuid + \"&token=\" + token).then(function (rlt) {\n            if (rlt.data) {\n                done();\n            }\n        });",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "ab115c6d-e459-44df-84fa-8ed2b55f7a5a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "b046e928-9e34-4d75-bb96-aea7fd8d5504",
          "ab115c6d-e459-44df-84fa-8ed2b55f7a5a"
        ],
        "pending": [],
        "skipped": [],
        "duration": 4004,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "31ceb41a-4143-425c-94be-f2face33aefd",
        "title": "用户数据查询测试",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "用户数据查询测试 \"before all\" hook",
            "timedOut": true,
            "duration": 1999,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  console.log('---------------------------------------------' + rlt);\n  publicKey = rlt.data.publicKey;\n  sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "f671d3c0-6ada-4d31-bd30-3313352eecb5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "此类测试之前，uuid和sign, 以及publickey都是存在的",
            "fullTitle": "用户数据查询测试 此类测试之前，uuid和sign, 以及publickey都是存在的",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "expect(uuid).to.be.equal(\"34534734563456\");\nexpect(sign).to.not.equal(null);\nexpect(publicKey).to.not.equal(null);\nexpect(token).to.not.equal(null);",
            "err": {},
            "isRoot": false,
            "uuid": "2203a887-069b-44f6-b258-d4775f61db35",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "默认查询一条用户数据",
            "fullTitle": "用户数据查询测试 默认查询一条用户数据",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// >>>>>>> 7beac6cc7c434455c3608c05539bc43c1cf6a0f6\nexpect(_User2.default.model.findOne()).to.be.ok;",
            "err": {},
            "isRoot": false,
            "uuid": "387f26fc-f8df-423e-b7cb-04846e5f2350",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查询18820965455的用户",
            "fullTitle": "用户数据查询测试 查询18820965455的用户",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ username: '18820965455' }).then(function (rlt) {\n      if (rlt) {\n        expect(rlt.username).to.be.equal('18820965455');\n        done();\n      }\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2b508970-3caf-4da7-b713-670d7a622092",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "删除testuser1234用户",
            "fullTitle": "用户数据查询测试 删除testuser1234用户",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.remove({ \"username\": \"testuser1234\" }).then(function (rlt) {\n  console.log(rlt);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4a935c28-7e71-4efd-8c61-5f134a7a1f84",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "fullTitle": "用户数据查询测试 测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.reg({\n  username: 'testuser1234',\n  passowrd: passowrd,\n  sign: token,\n  uuid: uuid\n}).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.regUsername).to.be.equal('testuser1234');\n  expect(rlt.token).to.not.equal(token);\n  expect(rlt.token).to.exist;\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "efe0f9ed-0358-4bb0-b761-b48c5e2f165d",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"password\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.reason).to.be.equal('PASSWORD WRONG');\n  expect(rlt.option).to.be.equal('OLD USER WITH MOBILE');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7f4a7610-6406-4551-80e8-dd2c091fce08",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.token).to.not.equal(token);\n  expect(rlt.msg).to.be.equal('LOGIN SUCCESS');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2b7d36b9-2374-47e0-8385-97c6c94bf45e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: '##$afwef23', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.reason).to.be.equal('USER EMPTY');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9979d3b1-7eb0-4bef-b887-ce14f273304a",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "fullTitle": "用户数据查询测试 查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.find({}).skip(0).limit(10).sort({ createdAt: -1 }).then(function (rlt) {\n  var firtMoment = rlt[0].createdAt;\n  var secondMoment = rlt[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b199383c-e7c2-428f-bcef-022b93018498",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "fullTitle": "用户数据查询测试 根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ 'username': 'lawadmin' }).then(function (rlt) {\n  expect(rlt.username).to.be.equal('lawadmin');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "881c6ae7-677b-442a-a193-c9c35d3783c5",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "2203a887-069b-44f6-b258-d4775f61db35",
          "387f26fc-f8df-423e-b7cb-04846e5f2350",
          "2b508970-3caf-4da7-b713-670d7a622092",
          "4a935c28-7e71-4efd-8c61-5f134a7a1f84",
          "efe0f9ed-0358-4bb0-b761-b48c5e2f165d",
          "7f4a7610-6406-4551-80e8-dd2c091fce08",
          "2b7d36b9-2374-47e0-8385-97c6c94bf45e",
          "9979d3b1-7eb0-4bef-b887-ce14f273304a",
          "b199383c-e7c2-428f-bcef-022b93018498",
          "881c6ae7-677b-442a-a193-c9c35d3783c5"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e092c75d-bf17-46df-a566-515897fbc42f",
        "title": "测试所有用户的API",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试所有用户的API \"before all\" hook",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  publicKey = rlt.data.publicKey;\n  sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "bdad4b56-712d-4d0a-ba21-63c88511f2f5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户列表（简略信息）, 只有10条, 时间倒序",
            "fullTitle": "测试所有用户的API 获取用户列表（简略信息）, 只有10条, 时间倒序",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var userPromise = _axios2.default.get(\"http://localhost:7001/api/v1/users?uuid=\" + uuid + \"&token=\" + token);\nuserPromise.then(function (rlt) {\n  console.log(rlt.data);\n  var firtMoment = rlt.data[0].createdAt;\n  var secondMoment = rlt.data[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.data.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1a45ea18-fe2a-4ca5-961c-0809478ddaf1",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "创建一个用户testuser7791，加密密码test7791",
            "fullTitle": "测试所有用户的API 创建一个用户testuser7791，加密密码test7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "86b5e23a-cc0e-40d5-9b3f-0bf2d6201817",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "fullTitle": "测试所有用户的API 手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "985e482c-1827-4b52-8a26-78e92669e97e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "c69f9c66-ede2-44a7-94dd-42603db20a62",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "b3bada67-ef83-41f2-85d5-f9e58ddb81ec",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "d3a5bd7d-5993-4fd2-85aa-933aa78fe3a4",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "登出testuser8800",
            "fullTitle": "测试所有用户的API 登出testuser8800",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "1efebe08-7e8a-43d4-b288-89f5a3fcfab8",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "0201e2df-e57b-4502-ac17-15d92c9ae92f",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "99a9dc4c-40f6-4c07-a42f-7609e74333fc",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "用户名密码登录testuser8800",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser8800",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "be85db02-bd17-4efb-9b91-7a1a8330b303",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "用户名密码登录testuser7791",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "4182d52d-23c9-403a-a481-f9a863d9196f",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "修改testuser7791个人资料中的手机号，手机号为18820965455",
            "fullTitle": "测试所有用户的API 修改testuser7791个人资料中的手机号，手机号为18820965455",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "0977b601-6bb1-4815-8baa-7f39ef3ecfcd",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "bd98f47c-51d8-4bb6-a70d-49302705271b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "手机号验证码登录testuser7791",
            "fullTitle": "测试所有用户的API 手机号验证码登录testuser7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "56c249bb-2f8b-46ec-bf4e-1e7cba916af1",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "1a45ea18-fe2a-4ca5-961c-0809478ddaf1",
          "86b5e23a-cc0e-40d5-9b3f-0bf2d6201817",
          "985e482c-1827-4b52-8a26-78e92669e97e",
          "c69f9c66-ede2-44a7-94dd-42603db20a62",
          "b3bada67-ef83-41f2-85d5-f9e58ddb81ec",
          "d3a5bd7d-5993-4fd2-85aa-933aa78fe3a4",
          "1efebe08-7e8a-43d4-b288-89f5a3fcfab8",
          "0201e2df-e57b-4502-ac17-15d92c9ae92f",
          "99a9dc4c-40f6-4c07-a42f-7609e74333fc",
          "be85db02-bd17-4efb-9b91-7a1a8330b303",
          "4182d52d-23c9-403a-a481-f9a863d9196f",
          "0977b601-6bb1-4815-8baa-7f39ef3ecfcd",
          "bd98f47c-51d8-4bb6-a70d-49302705271b",
          "56c249bb-2f8b-46ec-bf4e-1e7cba916af1"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}