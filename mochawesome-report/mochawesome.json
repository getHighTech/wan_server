{
  "stats": {
    "suites": 5,
    "tests": 32,
    "passes": 19,
    "pending": 0,
    "failures": 13,
    "start": "2018-08-07T05:10:56.649Z",
    "end": "2018-08-07T05:12:04.588Z",
    "duration": 67939,
    "testsRegistered": 32,
    "passPercent": 59.4,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "29f8d975-4b2b-421c-aa71-d024ad441cd5",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "4144c185-ca4b-48e7-9318-e35cb448ae27",
        "title": "测试ServerKey模型",
        "fullFile": "/Users/Vivien/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试ServerKey模型 \"before all\" hook",
            "timedOut": false,
            "duration": 309,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_connectdb.dbConnection.then(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rlt) {\n        var port, isOccupied;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        if (!rlt) {\n                            _context.next = 8;\n                            break;\n                        }\n                        _registerModel.Models.forEach(function (model) {\n                            _initApp2.default.use(_serverkey.validClient);\n                            (0, _api.generateRestFul)(model.collectionName, _initApp2.default, model);\n                        });\n                        port = 7001;\n                        _context.next = 5;\n                        return (0, _checkport.checkport)(port);\n                    case 5:\n                        isOccupied = _context.sent;\n                        if (!isOccupied) {\n                            _initApp2.default.listen(7001);\n                            console.log(\"测试地址在7001端口\");\n                        }\n                        done();\n                    case 8:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, undefined);\n    }));\n    return function (_x) {\n        return _ref.apply(this, arguments);\n    };\n}());",
            "err": {},
            "isRoot": false,
            "uuid": "d6b4c3f2-640a-4c48-8d1f-53691c67296e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥",
            "fullTitle": "测试ServerKey模型 获取用户的公钥",
            "timedOut": false,
            "duration": 81,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var uuid = (0, _v2.default)();\n_ServerKey2.default.genPublicKey(uuid, \"random\", {}, null).then(function (rlt) {\n    publicKey = rlt.publicKey;\n    var sign = rlt.sign;\n    var randomString = rlt.randomString;\n    var msgCiphered = rlt.msgCiphered;\n    if (_ed2.default.Verify(new Buffer(msgCiphered, 'utf8'), sign, publicKey)) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', publicKey, msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e6de67d9-2e10-4008-9ecf-b90bfee28463",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试ServerKey的公钥生成方法",
            "fullTitle": "测试ServerKey模型 测试ServerKey的公钥生成方法",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done();",
            "err": {},
            "isRoot": false,
            "uuid": "186c2252-7e64-4e93-99ee-052e61d40941",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e6de67d9-2e10-4008-9ecf-b90bfee28463",
          "186c2252-7e64-4e93-99ee-052e61d40941"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 81,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "8c2d43eb-5326-4940-89a9-adbfda1d068d",
        "title": "测试ServerKeyAPI",
        "fullFile": "/Users/Vivien/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥,并且验证",
            "fullTitle": "测试ServerKeyAPI 获取用户的公钥,并且验证",
            "timedOut": false,
            "duration": 110,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n    publicKey = rlt.data.publicKey;\n    var sign = rlt.data.sign;\n    var randomString = rlt.data.randomString;\n    var msgCiphered = rlt.data.msgCiphered;\n    token = msgCiphered;\n    if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "63c62216-784b-4d85-bd49-142cc60ec1dd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "fullTitle": "测试ServerKeyAPI 用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "timedOut": false,
            "duration": 64,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/valid_token?uuid=\" + uuid + \"&token=\" + token).then(function (rlt) {\n            if (rlt.data) {\n                done();\n            }\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "7bae16c7-9857-49b8-a2f8-ea8f3e10d1b1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "63c62216-784b-4d85-bd49-142cc60ec1dd",
          "7bae16c7-9857-49b8-a2f8-ea8f3e10d1b1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 174,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "fe5aade2-cc04-43f0-8666-812e5176a098",
        "title": "用户数据查询测试",
        "fullFile": "/Users/Vivien/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "用户数据查询测试 \"before all\" hook",
            "timedOut": false,
            "duration": 56,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  console.log('---------------------------------------------' + rlt);\n  publicKey = rlt.data.publicKey;\n  var sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3f65f2c7-3802-4556-9b36-aa83581c017a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "此类测试之前，uuid和sign, 以及publickey都是存在的",
            "fullTitle": "用户数据查询测试 此类测试之前，uuid和sign, 以及publickey都是存在的",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(uuid).to.be.equal(\"34534563456\");\nexpect(publicKey).to.not.equal(null);\nexpect(token).to.not.equal(null);",
            "err": {},
            "isRoot": false,
            "uuid": "398e5f14-9a22-4f3a-8217-9079654d7467",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "默认查询一条用户数据",
            "fullTitle": "用户数据查询测试 默认查询一条用户数据",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(_User2.default.model.findOne()).to.be.ok;",
            "err": {},
            "isRoot": false,
            "uuid": "11520ca3-f8f0-403e-9944-6544ed176bc9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查询18820965455的用户",
            "fullTitle": "用户数据查询测试 查询18820965455的用户",
            "timedOut": false,
            "duration": 119,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ username: '18820965455' }).then(function (rlt) {\n      if (rlt) {\n        expect(rlt.username).to.be.equal('18820965455');\n        done();\n      }\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "130ed42c-cc37-4edc-b6fe-cd32403fd7e2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "删除testuser1234用户",
            "fullTitle": "用户数据查询测试 删除testuser1234用户",
            "timedOut": false,
            "duration": 51,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.remove({ \"username\": \"testuser1234\" }).then(function (rlt) {\n  console.log(rlt);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "10c59b0f-ce83-4085-9168-92eaa75aa5cc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "fullTitle": "用户数据查询测试 测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "timedOut": false,
            "duration": 372,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.reg({\n  username: 'testuser1234',\n  passowrd: passowrd,\n  sign: token,\n  uuid: uuid\n}).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.msg).to.be.equal('USER CREATE SUCCESS');\n  expect(rlt.type).to.be.equal('success');\n  expect(rlt.token).to.not.equal(token);\n  token = rlt.token;\n  expect(rlt.token).to.exist;\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "17e92c9e-0651-4d6b-a5a3-2f07bff1d75e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "timedOut": false,
            "duration": 314,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"password\");\n    _User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n      console.log(rlt);\n      expect(rlt.type).to.be.equal('error');\n      expect(rlt.token).to.not.equal(token);\n      token = rlt.token;\n      expect(rlt.reason).to.be.equal('WRONG PASSWORD');\n      done();\n    }).catch(function (err) {\n      console.log(\"User.pwdLogin的错误\", err);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "da0d0db6-b65e-4ce3-96e1-64b02cc3be77",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 566,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  console.log(rlt);\n  expect(rlt.token).to.not.equal(token);\n  token = rlt.token;\n  expect(rlt.msg).to.be.equal('LOGIN SUCCESS');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "780998fd-841f-4ea2-8a0d-72e056c1b128",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 108,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: '##$afwef23', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.token).to.equal(token);\n  token = rlt.token;\n  expect(rlt.reason).to.be.equal('USER EMPTY');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "39a7cd94-ec4e-4741-8658-4b2123999c85",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "fullTitle": "用户数据查询测试 查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "timedOut": false,
            "duration": 108,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.find({}).skip(0).limit(10).sort({ createdAt: -1 }).then(function (rlt) {\n  var firtMoment = rlt[0].createdAt;\n  var secondMoment = rlt[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1050ade6-ea2b-40fc-ab7c-7e5947f9fa47",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "398e5f14-9a22-4f3a-8217-9079654d7467",
          "11520ca3-f8f0-403e-9944-6544ed176bc9",
          "130ed42c-cc37-4edc-b6fe-cd32403fd7e2",
          "10c59b0f-ce83-4085-9168-92eaa75aa5cc",
          "17e92c9e-0651-4d6b-a5a3-2f07bff1d75e",
          "da0d0db6-b65e-4ce3-96e1-64b02cc3be77",
          "780998fd-841f-4ea2-8a0d-72e056c1b128",
          "39a7cd94-ec4e-4741-8658-4b2123999c85",
          "1050ade6-ea2b-40fc-ab7c-7e5947f9fa47"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1639,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "c3de3b7e-a525-4c7a-a068-2bd0a4d885ee",
        "title": "测试所有用户的API",
        "fullFile": "/Users/Vivien/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户列表（简略信息）, 只有10条, 时间倒序",
            "fullTitle": "测试所有用户的API 获取用户列表（简略信息）, 只有10条, 时间倒序",
            "timedOut": false,
            "duration": 220,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var userPromise = _axios2.default.post(\"http://localhost:7001/api/v1/users?uuid=\" + uuid + \"&token=\" + token, {\n  condition: {},\n  page: 1,\n  pagesize: 10,\n  fields: [\"username\", \"createdAt\"],\n  sort: { createdAt: -1 }\n});\nuserPromise.then(function (rlt) {\n  var records = rlt.data.records;\n  var firtMoment = records[0].createdAt;\n  var secondMoment = records[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(records.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "591edc00-536b-4b14-bebe-2da357f3a802",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "创建一个用户testuser7791，加密密码test7791",
            "fullTitle": "测试所有用户的API 创建一个用户testuser7791，加密密码test7791",
            "timedOut": true,
            "duration": 5002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"test7791\");\n_axios2.default.put(\"http://localhost:7001/api/v1/user_reg?uuid=\" + uuid + \"&token=\" + token, {\n  username: 'testuser7791',\n  passowrd: passowrd,\n  sign: token,\n  uuid: uuid\n}).then(function (rlt) {\n  console.log(\"用户注册\", rlt.data);\n}).catch(function (err) {\n  console.log(\"用户注册错误\", err);\n});",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "bec0b070-240a-4c27-9b6b-316d1bc3be0b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "fullTitle": "测试所有用户的API 手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "timedOut": true,
            "duration": 5004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "4a7163b8-c7ce-4f57-8cf9-ca72c0501b85",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": true,
            "duration": 5003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "6c49c1e7-6569-48d0-ba3f-1c3d4fb7758b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": true,
            "duration": 5002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "d02efd15-3c48-4b3b-9471-40b3b77f9935",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": true,
            "duration": 5003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "c4c1ba46-aa29-4d88-a434-e7a40bf06d8f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser8800",
            "fullTitle": "测试所有用户的API 登出testuser8800",
            "timedOut": true,
            "duration": 5005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "392fc40d-b2e4-40ee-a760-a9f1d1540922",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": true,
            "duration": 5006,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "b610b2eb-19e9-45a1-ab44-ed06bfedc7d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": true,
            "duration": 5004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "8ed4bb46-25cb-41e8-8663-473c3f95d82d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户名密码登录testuser8800",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser8800",
            "timedOut": true,
            "duration": 5000,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "7d768cf3-843e-4397-8486-198af89307c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户名密码登录testuser7791",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser7791",
            "timedOut": true,
            "duration": 5005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "ebbba217-01d3-466e-ab69-c7e518ac4ef6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "修改testuser7791个人资料中的手机号，手机号为18820965455",
            "fullTitle": "测试所有用户的API 修改testuser7791个人资料中的手机号，手机号为18820965455",
            "timedOut": true,
            "duration": 5006,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "e5ccf238-af55-42a3-8293-7556976b4a42",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": true,
            "duration": 5005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "d8026d31-06ef-4799-8f35-4e190935c9da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "手机号验证码登录testuser7791",
            "fullTitle": "测试所有用户的API 手机号验证码登录testuser7791",
            "timedOut": true,
            "duration": 5006,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/Vivien/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "83fc1cfd-8ed1-46ba-93cd-00043bcaf56f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "591edc00-536b-4b14-bebe-2da357f3a802"
        ],
        "failures": [
          "bec0b070-240a-4c27-9b6b-316d1bc3be0b",
          "4a7163b8-c7ce-4f57-8cf9-ca72c0501b85",
          "6c49c1e7-6569-48d0-ba3f-1c3d4fb7758b",
          "d02efd15-3c48-4b3b-9471-40b3b77f9935",
          "c4c1ba46-aa29-4d88-a434-e7a40bf06d8f",
          "392fc40d-b2e4-40ee-a760-a9f1d1540922",
          "b610b2eb-19e9-45a1-ab44-ed06bfedc7d8",
          "8ed4bb46-25cb-41e8-8663-473c3f95d82d",
          "7d768cf3-843e-4397-8486-198af89307c4",
          "ebbba217-01d3-466e-ab69-c7e518ac4ef6",
          "e5ccf238-af55-42a3-8293-7556976b4a42",
          "d8026d31-06ef-4799-8f35-4e190935c9da",
          "83fc1cfd-8ed1-46ba-93cd-00043bcaf56f"
        ],
        "pending": [],
        "skipped": [],
        "duration": 65271,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "2143fd16-ca7b-4d56-b3b4-b55af19711d9",
        "title": "测试订单支付状态，追踪更新",
        "fullFile": "/Users/Vivien/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试订单支付状态，追踪更新 \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_connectdb.dbConnection.then(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rlt) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        done();\n                    case 1:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, _this);\n    }));\n    return function (_x) {\n        return _ref.apply(this, arguments);\n    };\n}());",
            "err": {},
            "isRoot": false,
            "uuid": "eaee224d-168f-4120-b436-825ee4f38c4e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "验证最新更新的订单结果",
            "fullTitle": "测试订单支付状态，追踪更新 验证最新更新的订单结果",
            "timedOut": false,
            "duration": 98,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_Order2.default.model.find({}, ['_id', 'userId', 'status', \"products\", \"user\", \"updatedAt\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    expect(rlt[0]._id).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "07f1e7e9-a2cb-480c-b413-7c2e148b9dc7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证店铺订单结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证店铺订单结果",
            "timedOut": false,
            "duration": 58,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_ShopOrder2.default.model.find({}, [\"userId\", \"status\", \"shopId\", \"updatedAt\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "557b5ba7-3283-4231-a439-052a31dfd516",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证账户结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证账户结果",
            "timedOut": false,
            "duration": 53,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_Balance2.default.model.find({}, ['userId', \"createdAt\", \"orderId\", \"updatedAt\", \"amount\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1d207737-ff07-4683-a8b2-7b36afa913c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证收入结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证收入结果",
            "timedOut": false,
            "duration": 81,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_BalanceIncome2.default.model.find({}, [\"reasonType\", \"amount\", \"updatedAt\", \"text\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fbd254da-5574-4de1-89d9-03adf0d22988",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "验证mongoose,Simple",
            "fullTitle": "测试订单支付状态，追踪更新 验证mongoose,Simple",
            "timedOut": false,
            "duration": 60,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_AccessLog2.default.model.create({\n    test1: \"hello\"\n}).then(function (rlt) {\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "17aae833-55ab-4dc5-a2e2-1d12952fc6fe",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "07f1e7e9-a2cb-480c-b413-7c2e148b9dc7",
          "557b5ba7-3283-4231-a439-052a31dfd516",
          "1d207737-ff07-4683-a8b2-7b36afa913c4",
          "fbd254da-5574-4de1-89d9-03adf0d22988",
          "17aae833-55ab-4dc5-a2e2-1d12952fc6fe"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 350,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}