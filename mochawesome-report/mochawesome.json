{
  "stats": {
    "suites": 4,
    "tests": 31,
    "passes": 14,
    "pending": 0,
    "failures": 17,
    "start": "2018-08-02T09:36:03.693Z",
    "end": "2018-08-02T09:36:33.483Z",
    "duration": 29790,
    "testsRegistered": 31,
    "passPercent": 45.2,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d5fdb36f-d246-4503-b25c-755d85b2ea8c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a8c55702-3d4e-4c78-a6b0-ea116e9e4270",
        "title": "测试ServerKey模型",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试ServerKey模型 \"before all\" hook",
            "timedOut": false,
            "duration": 330,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_connectdb.dbConnection.then(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rlt) {\n        var port, isOccupied;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        if (!rlt) {\n                            _context.next = 8;\n                            break;\n                        }\n                        _registerModel.Models.forEach(function (model) {\n                            console.log(model.collectionName);\n                            _initApp2.default.use(_serverkey.validClient);\n                            (0, _api.generateRestFul)(model.collectionName, _initApp2.default, model);\n                        });\n                        port = 7001;\n                        _context.next = 5;\n                        return (0, _checkport.checkport)(port);\n                    case 5:\n                        isOccupied = _context.sent;\n                        if (!isOccupied) {\n                            _initApp2.default.listen(7001);\n                            console.log(\"测试地址在7001端口\");\n                        }\n                        done();\n                    case 8:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, undefined);\n    }));\n    return function (_x) {\n        return _ref.apply(this, arguments);\n    };\n}());",
            "err": {},
            "isRoot": false,
            "uuid": "ff762ea8-01ab-4ccc-9902-36ef58719af1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥",
            "fullTitle": "测试ServerKey模型 获取用户的公钥",
            "timedOut": false,
            "duration": 92,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var uuid = (0, _v2.default)();\n_ServerKey2.default.genPublicKey(uuid, \"random\", {}, null).then(function (rlt) {\n    publicKey = rlt.publicKey;\n    var sign = rlt.sign;\n    var randomString = rlt.randomString;\n    var msgCiphered = rlt.msgCiphered;\n    if (_ed2.default.Verify(new Buffer(msgCiphered, 'utf8'), sign, publicKey)) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', publicKey, msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6eb1b451-a7c8-40cd-b357-a320b459af8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试ServerKey的公钥生成方法",
            "fullTitle": "测试ServerKey模型 测试ServerKey的公钥生成方法",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done();",
            "err": {},
            "isRoot": false,
            "uuid": "a99ce26f-c183-40e5-af09-32094e5c8e36",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6eb1b451-a7c8-40cd-b357-a320b459af8b",
          "a99ce26f-c183-40e5-af09-32094e5c8e36"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 92,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "65da5be3-c583-4e6d-b260-596200477bcb",
        "title": "测试ServerKeyAPI",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥,并且验证",
            "fullTitle": "测试ServerKeyAPI 获取用户的公钥,并且验证",
            "timedOut": false,
            "duration": 89,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n    publicKey = rlt.data.publicKey;\n    var sign = rlt.data.sign;\n    var randomString = rlt.data.randomString;\n    var msgCiphered = rlt.data.msgCiphered;\n    token = msgCiphered;\n    if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5331b908-b2c1-4786-9283-fdff70c026a5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "fullTitle": "测试ServerKeyAPI 用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "timedOut": false,
            "duration": 64,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/valid_token?uuid=\" + uuid + \"&token=\" + token).then(function (rlt) {\n            if (rlt.data) {\n                done();\n            }\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "8fc61d7a-541d-4c31-ad80-67c5b78d504b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5331b908-b2c1-4786-9283-fdff70c026a5",
          "8fc61d7a-541d-4c31-ad80-67c5b78d504b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 153,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b95c8bbd-5a2e-4ed7-82e6-5aa314619bad",
        "title": "用户数据查询测试",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "用户数据查询测试 \"before all\" hook",
            "timedOut": false,
            "duration": 77,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  console.log('---------------------------------------------' + rlt);\n  publicKey = rlt.data.publicKey;\n  sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "73220dfe-621b-4c54-90fd-62e92cf7bacf",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "此类测试之前，uuid和sign, 以及publickey都是存在的",
            "fullTitle": "用户数据查询测试 此类测试之前，uuid和sign, 以及publickey都是存在的",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(uuid).to.be.equal(\"34534734563456\");\nexpect(sign).to.not.equal(null);\nexpect(publicKey).to.not.equal(null);\nexpect(token).to.not.equal(null);",
            "err": {},
            "isRoot": false,
            "uuid": "d9162b63-37ed-467d-b52b-6675a386beb5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "默认查询一条用户数据",
            "fullTitle": "用户数据查询测试 默认查询一条用户数据",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// >>>>>>> 7beac6cc7c434455c3608c05539bc43c1cf6a0f6\nexpect(_User2.default.model.findOne()).to.be.ok;",
            "err": {},
            "isRoot": false,
            "uuid": "b1b6d0ab-303e-4fea-8c03-dd7fa90d2f79",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查询18820965455的用户",
            "fullTitle": "用户数据查询测试 查询18820965455的用户",
            "timedOut": false,
            "duration": 139,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ username: '18820965455' }).then(function (rlt) {\n      if (rlt) {\n        expect(rlt.username).to.be.equal('18820965455');\n        done();\n      }\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cd04a648-bc08-4e74-b9bd-192014bb2621",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "删除testuser1234用户",
            "fullTitle": "用户数据查询测试 删除testuser1234用户",
            "timedOut": false,
            "duration": 58,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.remove({ \"username\": \"testuser1234\" }).then(function (rlt) {\n  console.log(rlt);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2336a8bd-9cc3-4902-92a6-bf968d20b5b1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "fullTitle": "用户数据查询测试 测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "timedOut": false,
            "duration": 319,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.reg({\n  username: 'testuser1234',\n  passowrd: passowrd,\n  sign: token,\n  uuid: uuid\n}).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.regUsername).to.be.equal('testuser1234');\n  expect(rlt.token).to.not.equal(token);\n  expect(rlt.token).to.exist;\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ba74040b-ecb9-4848-998a-0d0de6b52a64",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"password\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.reason).to.be.equal('PASSWORD WRONG');\n  expect(rlt.option).to.be.equal('OLD USER WITH MOBILE');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {
              "message": "TypeError: _User2.default.pwdLogin is not a function",
              "estack": "TypeError: _User2.default.pwdLogin is not a function\n    at Context.<anonymous> (test/units/users.js:104:14)"
            },
            "isRoot": false,
            "uuid": "0f4c961b-b52f-494f-b4f2-6e50a3e7b82c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.token).to.not.equal(token);\n  expect(rlt.msg).to.be.equal('LOGIN SUCCESS');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {
              "message": "TypeError: _User2.default.pwdLogin is not a function",
              "estack": "TypeError: _User2.default.pwdLogin is not a function\n    at Context.<anonymous> (test/units/users.js:119:14)"
            },
            "isRoot": false,
            "uuid": "878a3a44-9e94-496b-8657-39d9bcdf3f54",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: '##$afwef23', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.reason).to.be.equal('USER EMPTY');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {
              "message": "TypeError: _User2.default.pwdLogin is not a function",
              "estack": "TypeError: _User2.default.pwdLogin is not a function\n    at Context.<anonymous> (test/units/users.js:134:14)"
            },
            "isRoot": false,
            "uuid": "55b2078a-b095-416b-b748-4aaa464cb587",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "fullTitle": "用户数据查询测试 查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "timedOut": false,
            "duration": 118,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.find({}).skip(0).limit(10).sort({ createdAt: -1 }).then(function (rlt) {\n  var firtMoment = rlt[0].createdAt;\n  var secondMoment = rlt[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ba85801c-d0f6-495c-ba4f-0fb380b20d43",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "fullTitle": "用户数据查询测试 根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "timedOut": false,
            "duration": 78,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ 'username': 'lawadmin' }).then(function (rlt) {\n  expect(rlt.username).to.be.equal('lawadmin');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d44b4568-086c-46fb-99b6-536de31805aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "根据用户名username: 18820965455,将其nickname修改为 zsx_test",
            "fullTitle": "用户数据查询测试 根据用户名username: 18820965455,将其nickname修改为 zsx_test",
            "timedOut": false,
            "duration": 151,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.update({ 'username': '18820965455' }, { $set: { nickname: 'zsx_test' } }, function (error, rlt) {\n  if (error) {\n    console.error(error);\n  } else {\n    console.error(\"更新nickname成功\");\n    _User2.default.model.findOne({ username: '18820965455' }, function (err, alt) {\n      if (!err) {\n        expect(alt.nickname).to.be.equal('zsx_test');\n        done();\n      }\n    });\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "91cd7f5a-40ab-4a21-9ebd-49fe04b974a1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "根据shopId: YhCNM6PqYrqTGMehh,查询4个",
            "fullTitle": "用户数据查询测试 根据shopId: YhCNM6PqYrqTGMehh,查询4个",
            "timedOut": false,
            "duration": 70,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_Products2.default.model.find({ 'shopId': 'YhCNM6PqYrqTGMehh' }).skip(0).limit(4).exec(function (err, alt) {\n  console.log('188---------------------------------------------------');\n  if (!err) {\n    console.log(alt);\n    expect(alt.length).to.be.equal(4);\n    done();\n  } else {\n    console.log(err);\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c195d0ca-9daa-40ba-a44f-0c81ff296848",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "根据userId:AT7p7bspKthfSMx7Q,查询该用户的bankcard",
            "fullTitle": "用户数据查询测试 根据userId:AT7p7bspKthfSMx7Q,查询该用户的bankcard",
            "timedOut": false,
            "duration": 59,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_BankCard2.default.model.find({ 'userId': 'AT7p7bspKthfSMx7Q' }).exec(function (err, alt) {\n  console.log('201---------------------------------------------------');\n  if (!err) {\n    console.log(alt);\n    expect(alt.length).to.be.equal(2);\n    done();\n  } else {\n    console.log(err);\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8ea15ca6-49e1-43b8-8118-dab78138db59",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d9162b63-37ed-467d-b52b-6675a386beb5",
          "b1b6d0ab-303e-4fea-8c03-dd7fa90d2f79",
          "cd04a648-bc08-4e74-b9bd-192014bb2621",
          "2336a8bd-9cc3-4902-92a6-bf968d20b5b1",
          "ba74040b-ecb9-4848-998a-0d0de6b52a64",
          "ba85801c-d0f6-495c-ba4f-0fb380b20d43",
          "d44b4568-086c-46fb-99b6-536de31805aa",
          "91cd7f5a-40ab-4a21-9ebd-49fe04b974a1",
          "c195d0ca-9daa-40ba-a44f-0c81ff296848",
          "8ea15ca6-49e1-43b8-8118-dab78138db59"
        ],
        "failures": [
          "0f4c961b-b52f-494f-b4f2-6e50a3e7b82c",
          "878a3a44-9e94-496b-8657-39d9bcdf3f54",
          "55b2078a-b095-416b-b748-4aaa464cb587"
        ],
        "pending": [],
        "skipped": [],
        "duration": 995,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c638eb7e-e9ea-4232-972f-d598f3790dc6",
        "title": "测试所有用户的API",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试所有用户的API \"before all\" hook",
            "timedOut": false,
            "duration": 65,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  publicKey = rlt.data.publicKey;\n  sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c6991d77-8b8c-4c44-9e98-ea1ee9246f0f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户列表（简略信息）, 只有10条, 时间倒序",
            "fullTitle": "测试所有用户的API 获取用户列表（简略信息）, 只有10条, 时间倒序",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var userPromise = _axios2.default.get(\"http://localhost:7001/api/v1/users?uuid=\" + uuid + \"&token=\" + token);\nuserPromise.then(function (rlt) {\n  console.log(rlt.data);\n  var firtMoment = rlt.data[0].createdAt;\n  var secondMoment = rlt.data[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.data.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "e7178815-080a-4511-9db3-d6fcc5ff7685",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "创建一个用户testuser7791，加密密码test7791",
            "fullTitle": "测试所有用户的API 创建一个用户testuser7791，加密密码test7791",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "4c0cdf87-8d59-46c1-9014-15438c41ce91",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "fullTitle": "测试所有用户的API 手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "ddbd0fe6-4efa-4dec-be56-7d5e01fa445e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "3f840fcb-5d48-4095-b0ab-445c37cc9e16",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "ed0dff9a-7dcb-4026-81b5-1a86bfc32caa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "d45246e1-5e2e-4bd3-9a53-e5d4b3d8a2e2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser8800",
            "fullTitle": "测试所有用户的API 登出testuser8800",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "2cc8235a-3c35-49c1-9e3c-d410f59489cc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "05fd7e4c-73df-4f9f-887b-3c8ad6185b57",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "8fc55619-d1b9-4d09-a8a8-dd4a7f85e70c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户名密码登录testuser8800",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser8800",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "3f1ab5b6-2f3c-4e3e-8eea-2bf1d4713a18",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户名密码登录testuser7791",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser7791",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "0957cc7c-73e0-479e-990d-422751637389",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "修改testuser7791个人资料中的手机号，手机号为18820965455",
            "fullTitle": "测试所有用户的API 修改testuser7791个人资料中的手机号，手机号为18820965455",
            "timedOut": true,
            "duration": 2000,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "2c9b15fe-5ce3-4382-8e06-b799e4853979",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "fceb6776-807b-46a1-9f5d-b8258619171a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "手机号验证码登录testuser7791",
            "fullTitle": "测试所有用户的API 手机号验证码登录testuser7791",
            "timedOut": true,
            "duration": 2000,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "db5c1e19-a961-468f-8ee3-0ddbca8bc27e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "e7178815-080a-4511-9db3-d6fcc5ff7685",
          "4c0cdf87-8d59-46c1-9014-15438c41ce91",
          "ddbd0fe6-4efa-4dec-be56-7d5e01fa445e",
          "3f840fcb-5d48-4095-b0ab-445c37cc9e16",
          "ed0dff9a-7dcb-4026-81b5-1a86bfc32caa",
          "d45246e1-5e2e-4bd3-9a53-e5d4b3d8a2e2",
          "2cc8235a-3c35-49c1-9e3c-d410f59489cc",
          "05fd7e4c-73df-4f9f-887b-3c8ad6185b57",
          "8fc55619-d1b9-4d09-a8a8-dd4a7f85e70c",
          "3f1ab5b6-2f3c-4e3e-8eea-2bf1d4713a18",
          "0957cc7c-73e0-479e-990d-422751637389",
          "2c9b15fe-5ce3-4382-8e06-b799e4853979",
          "fceb6776-807b-46a1-9f5d-b8258619171a",
          "db5c1e19-a961-468f-8ee3-0ddbca8bc27e"
        ],
        "pending": [],
        "skipped": [],
        "duration": 28021,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}