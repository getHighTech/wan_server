{
  "stats": {
    "suites": 5,
    "tests": 32,
    "passes": 19,
    "pending": 0,
    "failures": 13,
    "start": "2018-08-21T08:28:57.083Z",
    "end": "2018-08-21T08:30:05.199Z",
    "duration": 68116,
    "testsRegistered": 32,
    "passPercent": 59.4,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "3d9ae656-1842-43f9-baa9-dc5f589d356c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "7deb3f1a-bb93-4ac3-b0c9-14822c6afa15",
        "title": "测试ServerKey模型",
        "fullFile": "/Users/simon/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试ServerKey模型 \"before all\" hook",
            "timedOut": false,
            "duration": 336,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_connectdb.dbConnection.then(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rlt) {\n        var port, isOccupied;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        if (!rlt) {\n                            _context.next = 8;\n                            break;\n                        }\n                        _registerModel.Models.forEach(function (model) {\n                            _initApp2.default.use(_serverkey.validClient);\n                            (0, _api.generateRestFul)(model.collectionName, _initApp2.default, model);\n                        });\n                        port = 7001;\n                        _context.next = 5;\n                        return (0, _checkport.checkport)(port);\n                    case 5:\n                        isOccupied = _context.sent;\n                        if (!isOccupied) {\n                            _initApp2.default.listen(7001);\n                            console.log(\"测试地址在7001端口\");\n                        }\n                        done();\n                    case 8:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, undefined);\n    }));\n    return function (_x) {\n        return _ref.apply(this, arguments);\n    };\n}());",
            "err": {},
            "isRoot": false,
            "uuid": "211ccc3e-cd67-4de3-b5d0-db2cc7e7f059",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥",
            "fullTitle": "测试ServerKey模型 获取用户的公钥",
            "timedOut": false,
            "duration": 83,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var uuid = (0, _v2.default)();\n_ServerKey2.default.genPublicKey(uuid, \"random\", {}, null).then(function (rlt) {\n    publicKey = rlt.publicKey;\n    var sign = rlt.sign;\n    var randomString = rlt.randomString;\n    var msgCiphered = rlt.msgCiphered;\n    if (_ed2.default.Verify(new Buffer(msgCiphered, 'utf8'), sign, publicKey)) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', publicKey, msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f5df122a-e24c-4852-8662-c4d97efd7ef9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试ServerKey的公钥生成方法",
            "fullTitle": "测试ServerKey模型 测试ServerKey的公钥生成方法",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done();",
            "err": {},
            "isRoot": false,
            "uuid": "e65a6d12-3187-44e4-b9a1-717bd21b5720",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f5df122a-e24c-4852-8662-c4d97efd7ef9",
          "e65a6d12-3187-44e4-b9a1-717bd21b5720"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 83,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "a8c5c928-0c71-454d-8ce6-69e9114c7433",
        "title": "测试ServerKeyAPI",
        "fullFile": "/Users/simon/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥,并且验证",
            "fullTitle": "测试ServerKeyAPI 获取用户的公钥,并且验证",
            "timedOut": false,
            "duration": 103,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n    publicKey = rlt.data.publicKey;\n    var sign = rlt.data.sign;\n    var randomString = rlt.data.randomString;\n    var msgCiphered = rlt.data.msgCiphered;\n    token = msgCiphered;\n    if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8f0f850e-dedf-49ed-a144-fb011e765c5f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "fullTitle": "测试ServerKeyAPI 用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "timedOut": false,
            "duration": 68,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/valid_token?uuid=\" + uuid + \"&token=\" + token).then(function (rlt) {\n    if (rlt.data) {\n        done();\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1749392a-b8d8-4299-a228-061c548c6ba0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8f0f850e-dedf-49ed-a144-fb011e765c5f",
          "1749392a-b8d8-4299-a228-061c548c6ba0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 171,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "6cedcd93-81d0-4198-8068-46e55608c039",
        "title": "用户数据查询测试",
        "fullFile": "/Users/simon/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "用户数据查询测试 \"before all\" hook",
            "timedOut": false,
            "duration": 68,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  console.log('---------------------------------------------' + rlt);\n  publicKey = rlt.data.publicKey;\n  var sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7980d72b-0c3e-4772-a628-ab84556cbf64",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "此类测试之前，uuid和sign, 以及publickey都是存在的",
            "fullTitle": "用户数据查询测试 此类测试之前，uuid和sign, 以及publickey都是存在的",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(uuid).to.be.equal(\"34534563456\");\nexpect(publicKey).to.not.equal(null);\nexpect(token).to.not.equal(null);",
            "err": {},
            "isRoot": false,
            "uuid": "adc8ef09-7753-4ccf-a86b-c9e44f3014a1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "默认查询一条用户数据",
            "fullTitle": "用户数据查询测试 默认查询一条用户数据",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(_User2.default.model.findOne()).to.be.ok;",
            "err": {},
            "isRoot": false,
            "uuid": "7dbbe011-c85b-4c7f-83ab-5b82a762db4b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查询18820965455的用户",
            "fullTitle": "用户数据查询测试 查询18820965455的用户",
            "timedOut": false,
            "duration": 222,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ username: '18820965455' }).then(function (rlt) {\n  if (rlt) {\n    expect(rlt.username).to.be.equal('18820965455');\n    done();\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5d586333-95d5-41df-8ebd-fdae1f052d8a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "删除testuser1234用户",
            "fullTitle": "用户数据查询测试 删除testuser1234用户",
            "timedOut": false,
            "duration": 64,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.remove({ \"username\": \"testuser1234\" }).then(function (rlt) {\n  console.log(rlt);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ea973f37-d48d-4cbc-ae92-365b5d9d10aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "fullTitle": "用户数据查询测试 测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "timedOut": false,
            "duration": 421,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.reg({\n  username: 'testuser1234',\n  passowrd: passowrd,\n  sign: token,\n  uuid: uuid\n}).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.msg).to.be.equal('USER CREATE SUCCESS');\n  expect(rlt.type).to.be.equal('success');\n  expect(rlt.token).to.not.equal(token);\n  token = rlt.token;\n  expect(rlt.token).to.exist;\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4d74de27-a6e4-43fd-b93f-310b7d510868",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "timedOut": false,
            "duration": 370,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"password\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  console.log(rlt);\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.token).to.not.equal(token);\n  token = rlt.token;\n  expect(rlt.reason).to.be.equal('WRONG PASSWORD');\n  done();\n}).catch(function (err) {\n  console.log(\"User.pwdLogin的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "443e3245-30fb-4e09-a08c-08565f268e91",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 359,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  console.log(rlt);\n  expect(rlt.token).to.not.equal(token);\n  token = rlt.token;\n  expect(rlt.msg).to.be.equal('LOGIN SUCCESS');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e83fd444-dfe2-4fed-ba87-21e4ee2f8f57",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 122,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: '##$afwef23', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.token).to.equal(token);\n  token = rlt.token;\n  expect(rlt.reason).to.be.equal('USER EMPTY');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a0369df4-3e03-4248-a06b-afff1dd62912",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "fullTitle": "用户数据查询测试 查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "timedOut": false,
            "duration": 116,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.find({}).skip(0).limit(10).sort({ createdAt: -1 }).then(function (rlt) {\n  var firtMoment = rlt[0].createdAt;\n  var secondMoment = rlt[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4e33c716-408e-4590-9f82-48d967c746f9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "adc8ef09-7753-4ccf-a86b-c9e44f3014a1",
          "7dbbe011-c85b-4c7f-83ab-5b82a762db4b",
          "5d586333-95d5-41df-8ebd-fdae1f052d8a",
          "ea973f37-d48d-4cbc-ae92-365b5d9d10aa",
          "4d74de27-a6e4-43fd-b93f-310b7d510868",
          "443e3245-30fb-4e09-a08c-08565f268e91",
          "e83fd444-dfe2-4fed-ba87-21e4ee2f8f57",
          "a0369df4-3e03-4248-a06b-afff1dd62912",
          "4e33c716-408e-4590-9f82-48d967c746f9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1674,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "d43795e5-9b3a-49ee-ab79-9f9c552ee643",
        "title": "测试所有用户的API",
        "fullFile": "/Users/simon/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户列表（简略信息）, 只有10条, 时间倒序",
            "fullTitle": "测试所有用户的API 获取用户列表（简略信息）, 只有10条, 时间倒序",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var userPromise = _axios2.default.post(\"http://localhost:7001/api/v1/users?uuid=\" + uuid + \"&token=\" + token, {\n  condition: {},\n  page: 1,\n  pagesize: 10,\n  fields: [\"username\", \"createdAt\"],\n  sort: { createdAt: -1 }\n});\nuserPromise.then(function (rlt) {\n  console.log(rlt.data);\n  var firtMoment = rlt.data.records[0].createdAt;\n  var secondMoment = rlt.data.records[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.data.records.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ee4cbe97-a253-4abc-9bce-b5283c5316f8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "创建一个用户testuser7791，加密密码test7791",
            "fullTitle": "测试所有用户的API 创建一个用户testuser7791，加密密码test7791",
            "timedOut": true,
            "duration": 5004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"test7791\");\n_axios2.default.put(\"http://localhost:7001/api/v1/user_reg?uuid=\" + uuid + \"&token=\" + token, {\n  username: 'testuser7791', passowrd: passowrd, sign: token, uuid: uuid\n}).then(function (rlt) {\n  console.log(\"注册返回消息\", rlt);\n  expect(rlt.data.type).to.be.equal(\"success\");\n}).catch(function (err) {\n  console.log(\"错误1\", err);\n});",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "427d2b55-6159-44af-b0ec-a2860ba3d081",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "fullTitle": "测试所有用户的API 手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "timedOut": true,
            "duration": 5003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "c28b2793-70cd-46e6-89b5-77cf1aa8d6b0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": true,
            "duration": 5003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "701a20ce-bd3e-47f9-856e-1d06e73dd3bc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": true,
            "duration": 5005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "0a45ed0f-82a9-44da-b591-d83091efdea4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": true,
            "duration": 5001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "b7db55b6-4e38-42f4-8220-0916876516dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser8800",
            "fullTitle": "测试所有用户的API 登出testuser8800",
            "timedOut": true,
            "duration": 5005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "af44cf81-05c3-46c9-bfec-122f3f20e40a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": true,
            "duration": 5001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "72433c05-611b-4ea2-899e-9d685cddfdc9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": true,
            "duration": 5003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "a87becd9-7791-4851-b34e-e91b40252e90",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户名密码登录testuser8800",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser8800",
            "timedOut": true,
            "duration": 5001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "ad818b82-ed03-448f-ad18-8a2c1be845cb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户名密码登录testuser7791",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser7791",
            "timedOut": true,
            "duration": 5005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "2100b3dd-fdb5-40f1-97a8-3f7825bbe1ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "修改testuser7791个人资料中的手机号，手机号为18820965455",
            "fullTitle": "测试所有用户的API 修改testuser7791个人资料中的手机号，手机号为18820965455",
            "timedOut": true,
            "duration": 5001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "95c3c96c-4732-4c1a-84ea-06652b1f3d50",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": true,
            "duration": 5004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "df8dff01-c49e-42d0-a7ea-39d7fccc83aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "手机号验证码登录testuser7791",
            "fullTitle": "测试所有用户的API 手机号验证码登录testuser7791",
            "timedOut": true,
            "duration": 5004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)",
              "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/simon/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "b095629f-b2ba-41e3-a597-1936a6e4794a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ee4cbe97-a253-4abc-9bce-b5283c5316f8"
        ],
        "failures": [
          "427d2b55-6159-44af-b0ec-a2860ba3d081",
          "c28b2793-70cd-46e6-89b5-77cf1aa8d6b0",
          "701a20ce-bd3e-47f9-856e-1d06e73dd3bc",
          "0a45ed0f-82a9-44da-b591-d83091efdea4",
          "b7db55b6-4e38-42f4-8220-0916876516dc",
          "af44cf81-05c3-46c9-bfec-122f3f20e40a",
          "72433c05-611b-4ea2-899e-9d685cddfdc9",
          "a87becd9-7791-4851-b34e-e91b40252e90",
          "ad818b82-ed03-448f-ad18-8a2c1be845cb",
          "2100b3dd-fdb5-40f1-97a8-3f7825bbe1ec",
          "95c3c96c-4732-4c1a-84ea-06652b1f3d50",
          "df8dff01-c49e-42d0-a7ea-39d7fccc83aa",
          "b095629f-b2ba-41e3-a597-1936a6e4794a"
        ],
        "pending": [],
        "skipped": [],
        "duration": 65240,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "7f895163-06d7-4d16-b517-d99af9a306fe",
        "title": "测试订单支付状态，追踪更新",
        "fullFile": "/Users/simon/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试订单支付状态，追踪更新 \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_connectdb.dbConnection.then(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rlt) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        done();\n                    case 1:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, _this);\n    }));\n    return function (_x) {\n        return _ref.apply(this, arguments);\n    };\n}());",
            "err": {},
            "isRoot": false,
            "uuid": "56a7ec06-754f-4ecd-9c21-41efaf5c86bd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "验证最新更新的订单结果",
            "fullTitle": "测试订单支付状态，追踪更新 验证最新更新的订单结果",
            "timedOut": false,
            "duration": 109,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_Order2.default.model.find({}, ['_id', 'userId', 'status', \"products\", \"user\", \"updatedAt\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    expect(rlt[0]._id).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e6b8e084-fd04-4c63-b946-0b56ed1d31b9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证店铺订单结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证店铺订单结果",
            "timedOut": false,
            "duration": 67,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_ShopOrder2.default.model.find({}, [\"userId\", \"status\", \"shopId\", \"updatedAt\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a17efbbc-29f1-4811-8981-80d2ed213f5b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证账户结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证账户结果",
            "timedOut": false,
            "duration": 66,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_Balance2.default.model.find({}, ['userId', \"createdAt\", \"orderId\", \"updatedAt\", \"amount\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1090348f-7568-47d7-8a61-45a3ce3f23f6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证收入结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证收入结果",
            "timedOut": false,
            "duration": 90,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_BalanceIncome2.default.model.find({}, [\"reasonType\", \"amount\", \"updatedAt\", \"text\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5e61b78c-b11d-493d-a36a-b1c0839b95ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "验证mongoose,Simple",
            "fullTitle": "测试订单支付状态，追踪更新 验证mongoose,Simple",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_AccessLog2.default.model.create({\n    test1: \"hello\"\n}).then(function (rlt) {\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1b623715-3c9c-4f87-ada4-ffce88681eac",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e6b8e084-fd04-4c63-b946-0b56ed1d31b9",
          "a17efbbc-29f1-4811-8981-80d2ed213f5b",
          "1090348f-7568-47d7-8a61-45a3ce3f23f6",
          "5e61b78c-b11d-493d-a36a-b1c0839b95ee",
          "1b623715-3c9c-4f87-ada4-ffce88681eac"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 401,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}