{
  "stats": {
    "suites": 4,
    "tests": 30,
    "passes": 13,
    "pending": 0,
    "failures": 17,
    "start": "2018-07-27T09:18:58.477Z",
    "end": "2018-07-27T09:19:28.421Z",
    "duration": 29944,
    "testsRegistered": 30,
    "passPercent": 43.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "b78b2741-6ec3-4729-9397-c566f1315838",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "df97bd75-9928-40bf-86f0-2b537da3a4f3",
        "title": "测试ServerKey模型",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试ServerKey模型 \"before all\" hook",
            "timedOut": false,
            "duration": 309,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_connectdb.dbConnection.then(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rlt) {\n        var port, isOccupied;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        if (!rlt) {\n                            _context.next = 8;\n                            break;\n                        }\n                        _registerModel.Models.forEach(function (model) {\n                            console.log(model.collectionName);\n                            _initApp2.default.use(_serverkey.validClient);\n                            (0, _api.generateRestFul)(model.collectionName, _initApp2.default, model);\n                        });\n                        port = 7001;\n                        _context.next = 5;\n                        return (0, _checkport.checkport)(port);\n                    case 5:\n                        isOccupied = _context.sent;\n                        if (!isOccupied) {\n                            _initApp2.default.listen(7001);\n                            console.log(\"测试地址在7001端口\");\n                        }\n                        done();\n                    case 8:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, undefined);\n    }));\n    return function (_x) {\n        return _ref.apply(this, arguments);\n    };\n}());",
            "err": {},
            "isRoot": false,
            "uuid": "4a457fad-09d7-414f-9e29-7c5edcd9a340",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥",
            "fullTitle": "测试ServerKey模型 获取用户的公钥",
            "timedOut": false,
            "duration": 82,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var uuid = (0, _v2.default)();\n_ServerKey2.default.genPublicKey(uuid, \"random\", {}, null).then(function (rlt) {\n    publicKey = rlt.publicKey;\n    var sign = rlt.sign;\n    var randomString = rlt.randomString;\n    var msgCiphered = rlt.msgCiphered;\n    if (_ed2.default.Verify(new Buffer(msgCiphered, 'utf8'), sign, publicKey)) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', publicKey, msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9262a73d-9bbd-43df-a515-75d58e90d077",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试ServerKey的公钥生成方法",
            "fullTitle": "测试ServerKey模型 测试ServerKey的公钥生成方法",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done();",
            "err": {},
            "isRoot": false,
            "uuid": "f5eb9487-5329-4663-8359-2f4ba2f140c9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9262a73d-9bbd-43df-a515-75d58e90d077",
          "f5eb9487-5329-4663-8359-2f4ba2f140c9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 82,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7b7d2e2f-753a-4fb5-81d7-122c1059d7a0",
        "title": "测试ServerKeyAPI",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥,并且验证",
            "fullTitle": "测试ServerKeyAPI 获取用户的公钥,并且验证",
            "timedOut": false,
            "duration": 90,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n    publicKey = rlt.data.publicKey;\n    var sign = rlt.data.sign;\n    var randomString = rlt.data.randomString;\n    var msgCiphered = rlt.data.msgCiphered;\n    token = msgCiphered;\n    if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b9044a1d-3a8f-43bb-afa6-be83a7e8a1b0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "fullTitle": "测试ServerKeyAPI 用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "timedOut": false,
            "duration": 66,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/valid_token?uuid=\" + uuid + \"&token=\" + token).then(function (rlt) {\n            if (rlt.data) {\n                done();\n            }\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "b3bb4a1d-43f0-4df1-970d-8d8af511434a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b9044a1d-3a8f-43bb-afa6-be83a7e8a1b0",
          "b3bb4a1d-43f0-4df1-970d-8d8af511434a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 156,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c777917b-9b2a-4260-9ca4-fe3f2f39634e",
        "title": "用户数据查询测试",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "用户数据查询测试 \"before all\" hook",
            "timedOut": false,
            "duration": 63,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  console.log('---------------------------------------------' + rlt);\n  publicKey = rlt.data.publicKey;\n  sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c8f39913-1b6a-466f-a343-932918f2ec4f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "此类测试之前，uuid和sign, 以及publickey都是存在的",
            "fullTitle": "用户数据查询测试 此类测试之前，uuid和sign, 以及publickey都是存在的",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(uuid).to.be.equal(\"34534734563456\");\nexpect(sign).to.not.equal(null);\nexpect(publicKey).to.not.equal(null);\nexpect(token).to.not.equal(null);",
            "err": {},
            "isRoot": false,
            "uuid": "8059a584-6bfe-497a-ae7b-f0faa20ec9b9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "默认查询一条用户数据",
            "fullTitle": "用户数据查询测试 默认查询一条用户数据",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// >>>>>>> 7beac6cc7c434455c3608c05539bc43c1cf6a0f6\nexpect(_User2.default.model.findOne()).to.be.ok;",
            "err": {},
            "isRoot": false,
            "uuid": "7b52ddad-e57c-4a41-b8c1-3e0b58328132",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查询18820965455的用户",
            "fullTitle": "用户数据查询测试 查询18820965455的用户",
            "timedOut": false,
            "duration": 187,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ username: '18820965455' }).then(function (rlt) {\n      if (rlt) {\n        expect(rlt.username).to.be.equal('18820965455');\n        done();\n      }\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "544b0a6a-7aa5-4c7c-8e91-d6cc3858d17a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "删除testuser1234用户",
            "fullTitle": "用户数据查询测试 删除testuser1234用户",
            "timedOut": false,
            "duration": 58,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.remove({ \"username\": \"testuser1234\" }).then(function (rlt) {\n  console.log(rlt);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a6136cf8-e6c1-48e5-9de6-947016afd6df",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "fullTitle": "用户数据查询测试 测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "timedOut": false,
            "duration": 323,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.reg({\n  username: 'testuser1234',\n  passowrd: passowrd,\n  sign: token,\n  uuid: uuid\n}).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.regUsername).to.be.equal('testuser1234');\n  expect(rlt.token).to.not.equal(token);\n  expect(rlt.token).to.exist;\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "740e5a95-415a-46d9-93af-a03e9ef1b85f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"password\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.reason).to.be.equal('PASSWORD WRONG');\n  expect(rlt.option).to.be.equal('OLD USER WITH MOBILE');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {
              "message": "TypeError: _User2.default.pwdLogin is not a function",
              "estack": "TypeError: _User2.default.pwdLogin is not a function\n    at Context.<anonymous> (test/units/users.js:109:14)"
            },
            "isRoot": false,
            "uuid": "4d0dcdb7-7ef9-42de-b16e-8c4da1bfcf8f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.token).to.not.equal(token);\n  expect(rlt.msg).to.be.equal('LOGIN SUCCESS');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {
              "message": "TypeError: _User2.default.pwdLogin is not a function",
              "estack": "TypeError: _User2.default.pwdLogin is not a function\n    at Context.<anonymous> (test/units/users.js:124:14)"
            },
            "isRoot": false,
            "uuid": "c8bbc68b-4026-46c6-813f-1a360bd2c50d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: '##$afwef23', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.reason).to.be.equal('USER EMPTY');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {
              "message": "TypeError: _User2.default.pwdLogin is not a function",
              "estack": "TypeError: _User2.default.pwdLogin is not a function\n    at Context.<anonymous> (test/units/users.js:139:14)"
            },
            "isRoot": false,
            "uuid": "bd25614b-7ce2-4c49-9520-6738269028bf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "fullTitle": "用户数据查询测试 查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "timedOut": false,
            "duration": 118,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.find({}).skip(0).limit(10).sort({ createdAt: -1 }).then(function (rlt) {\n  var firtMoment = rlt[0].createdAt;\n  var secondMoment = rlt[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3e594148-8cab-4e5e-99ca-e81f1e38a081",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "fullTitle": "用户数据查询测试 根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "timedOut": false,
            "duration": 120,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ 'username': 'lawadmin' }).then(function (rlt) {\n  expect(rlt.username).to.be.equal('lawadmin');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dfc499ca-2551-43cd-b916-17e363a923b5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "根据用户名username: 18820965455,将其nickname修改为 zsx_test",
            "fullTitle": "用户数据查询测试 根据用户名username: 18820965455,将其nickname修改为 zsx_test",
            "timedOut": false,
            "duration": 195,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.update({ 'username': '18820965455' }, { $set: { nickname: 'zsx_test' } }, function (error, rlt) {\n  if (error) {\n    console.error(error);\n  } else {\n    console.error(\"更新nickname成功\");\n    _User2.default.model.findOne({ username: '18820965455' }, function (err, alt) {\n      if (!err) {\n        expect(alt.nickname).to.be.equal('zsx_test');\n        done();\n      }\n    });\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6091df3c-87df-4880-93e6-19ecc3c0b850",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "fullTitle": "用户数据查询测试 根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_User2.default.model.find({ 'username': 'lawadmin' }, function (err, alt) {\n  console.log('193---------------------------------------------------');\n  console.log(alt.auth_cards);\n  if (!err) {}\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "3254a3e8-8ecd-43a9-aeff-5a0c745f23a1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8059a584-6bfe-497a-ae7b-f0faa20ec9b9",
          "7b52ddad-e57c-4a41-b8c1-3e0b58328132",
          "544b0a6a-7aa5-4c7c-8e91-d6cc3858d17a",
          "a6136cf8-e6c1-48e5-9de6-947016afd6df",
          "740e5a95-415a-46d9-93af-a03e9ef1b85f",
          "3e594148-8cab-4e5e-99ca-e81f1e38a081",
          "dfc499ca-2551-43cd-b916-17e363a923b5",
          "6091df3c-87df-4880-93e6-19ecc3c0b850"
        ],
        "failures": [
          "4d0dcdb7-7ef9-42de-b16e-8c4da1bfcf8f",
          "c8bbc68b-4026-46c6-813f-1a360bd2c50d",
          "bd25614b-7ce2-4c49-9520-6738269028bf",
          "3254a3e8-8ecd-43a9-aeff-5a0c745f23a1"
        ],
        "pending": [],
        "skipped": [],
        "duration": 3006,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "de7d0308-06bd-4dcc-88e1-2ccb5df1ed5e",
        "title": "测试所有用户的API",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试所有用户的API \"before all\" hook",
            "timedOut": false,
            "duration": 63,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  publicKey = rlt.data.publicKey;\n  sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "03d2d50c-c2b8-457b-8354-2b60fe5f25df",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户列表（简略信息）, 只有10条, 时间倒序",
            "fullTitle": "测试所有用户的API 获取用户列表（简略信息）, 只有10条, 时间倒序",
            "timedOut": false,
            "duration": 191,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var userPromise = _axios2.default.get(\"http://localhost:7001/api/v1/users?uuid=\" + uuid + \"&token=\" + token);\nuserPromise.then(function (rlt) {\n  console.log(rlt.data);\n  var firtMoment = rlt.data[0].createdAt;\n  var secondMoment = rlt.data[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.data.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e43f3b5f-a3c3-4993-86fb-5195e6e153b8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "创建一个用户testuser7791，加密密码test7791",
            "fullTitle": "测试所有用户的API 创建一个用户testuser7791，加密密码test7791",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "db27a677-1c49-496e-90bc-4e930392c2c2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "fullTitle": "测试所有用户的API 手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "cc0727e3-42d9-43e3-8949-eae7b13506f4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "5bcb6636-fee2-498f-beca-640924fb1633",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "f9959b95-d810-417f-8e18-850fd28559a7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "3ad0c664-86a5-4f2c-9825-cfb0c20861ef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser8800",
            "fullTitle": "测试所有用户的API 登出testuser8800",
            "timedOut": true,
            "duration": 2000,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "27356246-6665-42ac-95b9-ecdc5bdb0830",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "9064ad3e-76c6-4252-a48d-7cd1983df171",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "86260ba2-5fa4-4255-b782-d7a3fa9a62e3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户名密码登录testuser8800",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser8800",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "5e91ea66-a056-4fbd-aa7f-9d48a99ccd03",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户名密码登录testuser7791",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser7791",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "46e8f6bf-4667-45dd-b65c-b4ad00cc909b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "修改testuser7791个人资料中的手机号，手机号为18820965455",
            "fullTitle": "测试所有用户的API 修改testuser7791个人资料中的手机号，手机号为18820965455",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "bf20cca0-9f36-4c46-9669-4235a414ae04",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "0d7fd586-8386-4bd5-88f0-ae89bef7c74e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "手机号验证码登录testuser7791",
            "fullTitle": "测试所有用户的API 手机号验证码登录testuser7791",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "f9f5fce5-ae4e-42b8-bd61-446fbfa29126",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e43f3b5f-a3c3-4993-86fb-5195e6e153b8"
        ],
        "failures": [
          "db27a677-1c49-496e-90bc-4e930392c2c2",
          "cc0727e3-42d9-43e3-8949-eae7b13506f4",
          "5bcb6636-fee2-498f-beca-640924fb1633",
          "f9959b95-d810-417f-8e18-850fd28559a7",
          "3ad0c664-86a5-4f2c-9825-cfb0c20861ef",
          "27356246-6665-42ac-95b9-ecdc5bdb0830",
          "9064ad3e-76c6-4252-a48d-7cd1983df171",
          "86260ba2-5fa4-4255-b782-d7a3fa9a62e3",
          "5e91ea66-a056-4fbd-aa7f-9d48a99ccd03",
          "46e8f6bf-4667-45dd-b65c-b4ad00cc909b",
          "bf20cca0-9f36-4c46-9669-4235a414ae04",
          "0d7fd586-8386-4bd5-88f0-ae89bef7c74e",
          "f9f5fce5-ae4e-42b8-bd61-446fbfa29126"
        ],
        "pending": [],
        "skipped": [],
        "duration": 26215,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}