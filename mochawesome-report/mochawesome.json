{
  "stats": {
    "suites": 5,
    "tests": 6,
    "passes": 0,
    "pending": 0,
    "failures": 6,
    "start": "2018-08-03T04:44:15.754Z",
    "end": "2018-08-03T04:44:33.808Z",
    "duration": 18054,
    "testsRegistered": 35,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 3,
    "hasOther": true,
    "skipped": 29,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "ec816dc5-e347-4ed9-b7b2-7b9ee1b946a9",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "61cd793a-16c3-4819-a3c9-b893ff7e4e5d",
        "title": "测试ServerKey模型",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试ServerKey模型 \"before all\" hook",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_connectdb.dbConnection.then(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rlt) {\n        var port, isOccupied;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        if (!rlt) {\n                            _context.next = 8;\n                            break;\n                        }\n                        _registerModel.Models.forEach(function (model) {\n                            console.log(model.collectionName);\n                            _initApp2.default.use(_serverkey.validClient);\n                            (0, _api.generateRestFul)(model.collectionName, _initApp2.default, model);\n                        });\n                        port = 7001;\n                        _context.next = 5;\n                        return (0, _checkport.checkport)(port);\n                    case 5:\n                        isOccupied = _context.sent;\n                        if (!isOccupied) {\n                            _initApp2.default.listen(7001);\n                            console.log(\"测试地址在7001端口\");\n                        }\n                        done();\n                    case 8:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, undefined);\n    }));\n    return function (_x) {\n        return _ref.apply(this, arguments);\n    };\n}());",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "7036f734-80e7-4c4b-8388-e751ebe42e9c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥",
            "fullTitle": "测试ServerKey模型 获取用户的公钥",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var uuid = (0, _v2.default)();\n_ServerKey2.default.genPublicKey(uuid, \"random\", {}, null).then(function (rlt) {\n    publicKey = rlt.publicKey;\n    var sign = rlt.sign;\n    var randomString = rlt.randomString;\n    var msgCiphered = rlt.msgCiphered;\n    if (_ed2.default.Verify(new Buffer(msgCiphered, 'utf8'), sign, publicKey)) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', publicKey, msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b6c8cb64-dbe0-422d-88ce-e61aa2be543f",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试ServerKey的公钥生成方法",
            "fullTitle": "测试ServerKey模型 测试ServerKey的公钥生成方法",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done();",
            "err": {},
            "isRoot": false,
            "uuid": "88af7f35-204e-4ba8-9c5b-71de2705e661",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "b6c8cb64-dbe0-422d-88ce-e61aa2be543f",
          "88af7f35-204e-4ba8-9c5b-71de2705e661"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0d00fe4a-07cb-4a2f-8235-1658b9680958",
        "title": "测试ServerKeyAPI",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户的公钥,并且验证",
            "fullTitle": "测试ServerKeyAPI 获取用户的公钥,并且验证",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n    publicKey = rlt.data.publicKey;\n    var sign = rlt.data.sign;\n    var randomString = rlt.data.randomString;\n    var msgCiphered = rlt.data.msgCiphered;\n    token = msgCiphered;\n    if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n        // 验证函数返回了true，通过验证\n        var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n        expect(msg).to.be.equal(randomString);\n        done();\n    }\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "1df6f46f-8b80-4ff1-9076-c08d02aea1c1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "fullTitle": "测试ServerKeyAPI 用户设备的UUID和sign去验证， 上一个测试的结果是否正确",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/valid_token?uuid=\" + uuid + \"&token=\" + token).then(function (rlt) {\n            if (rlt.data) {\n                done();\n            }\n        });",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "5f55afd8-30ba-423a-beab-c257771d7a42",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "1df6f46f-8b80-4ff1-9076-c08d02aea1c1",
          "5f55afd8-30ba-423a-beab-c257771d7a42"
        ],
        "pending": [],
        "skipped": [],
        "duration": 4004,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b002549b-35f9-418f-b1a5-d11cb19af2b7",
        "title": "用户数据查询测试",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "用户数据查询测试 \"before all\" hook",
            "timedOut": true,
            "duration": 2000,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  console.log('---------------------------------------------' + rlt);\n  publicKey = rlt.data.publicKey;\n  sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "551521d3-4a55-4b49-90e3-8777a8414505",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "此类测试之前，uuid和sign, 以及publickey都是存在的",
            "fullTitle": "用户数据查询测试 此类测试之前，uuid和sign, 以及publickey都是存在的",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "expect(uuid).to.be.equal(\"34534734563456\");\nexpect(sign).to.not.equal(null);\nexpect(publicKey).to.not.equal(null);\nexpect(token).to.not.equal(null);",
            "err": {},
            "isRoot": false,
            "uuid": "862c889b-afb3-4cc9-b74e-66ea40deefae",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "默认查询一条用户数据",
            "fullTitle": "用户数据查询测试 默认查询一条用户数据",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// >>>>>>> 7beac6cc7c434455c3608c05539bc43c1cf6a0f6\nexpect(_User2.default.model.findOne()).to.be.ok;",
            "err": {},
            "isRoot": false,
            "uuid": "bcf8012a-c2a9-4688-8cf6-83e4ba886f96",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查询18820965455的用户",
            "fullTitle": "用户数据查询测试 查询18820965455的用户",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ username: '18820965455' }).then(function (rlt) {\n      if (rlt) {\n        expect(rlt.username).to.be.equal('18820965455');\n        done();\n      }\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d09b213b-73c9-4897-8d6c-19490ece665f",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "删除testuser1234用户",
            "fullTitle": "用户数据查询测试 删除testuser1234用户",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.remove({ \"username\": \"testuser1234\" }).then(function (rlt) {\n  console.log(rlt);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8a21276f-a598-4959-b80e-b4383b87d143",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "fullTitle": "用户数据查询测试 测试User.reg方法，新建testuser1234用户， 密码为testuser12345",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.reg({\n  username: 'testuser1234',\n  passowrd: passowrd,\n  sign: token,\n  uuid: uuid\n}).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.regUsername).to.be.equal('testuser1234');\n  expect(rlt.token).to.not.equal(token);\n  expect(rlt.token).to.exist;\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fed10d55-337a-4185-962b-e4614d402166",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"password\"",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"password\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.reason).to.be.equal('PASSWORD WRONG');\n  expect(rlt.option).to.be.equal('OLD USER WITH MOBILE');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "de8c9eed-acb9-422d-a3a7-5a6cff0aca9a",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，testuser1234用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: 'testuser1234', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.token).to.not.equal(token);\n  expect(rlt.msg).to.be.equal('LOGIN SUCCESS');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "403b555f-c723-4d3c-a7c2-6c3e141a7875",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "fullTitle": "用户数据查询测试 测试User.pwdLogin方法，##$afwef23用户登录, 密码为\"testuser12345\"",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var passowrd = (0, _ciphers.cipher)('aes192', token, \"testuser12345\");\n_User2.default.pwdLogin({ username: '##$afwef23', passowrd: passowrd, sign: token, uuid: uuid }).then(function (rlt) {\n  // console.log({rlt});\n  expect(rlt.type).to.be.equal('error');\n  expect(rlt.reason).to.be.equal('USER EMPTY');\n  done();\n}).catch(function (err) {\n  console.log(\"User.reg的错误\", err);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d2f393f7-df23-4e67-9087-96fc06e0a844",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "fullTitle": "用户数据查询测试 查询前10条用户数据，并且按照时间顺序倒序排列,并且指定只要用户名和创建时间的字段",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.find({}).skip(0).limit(10).sort({ createdAt: -1 }).then(function (rlt) {\n  var firtMoment = rlt[0].createdAt;\n  var secondMoment = rlt[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "738da14f-df5a-4680-90f3-cf606b24e46d",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "fullTitle": "用户数据查询测试 根据用户Id: NR4uitrWdh9eL649k,查询一个用户， 其用户名为lawadmin",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.findOne({ 'username': 'lawadmin' }).then(function (rlt) {\n  expect(rlt.username).to.be.equal('lawadmin');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ed6bc367-f11e-4531-ac73-f0f7c2a1d0e6",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "根据用户名username: 18820965455,将其nickname修改为 zsx_test",
            "fullTitle": "用户数据查询测试 根据用户名username: 18820965455,将其nickname修改为 zsx_test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_User2.default.model.update({ 'username': '18820965455' }, { $set: { nickname: 'zsx_test' } }, function (error, rlt) {\n  if (error) {\n    console.error(error);\n  } else {\n    console.error(\"更新nickname成功\");\n    _User2.default.model.findOne({ username: '18820965455' }, function (err, alt) {\n      if (!err) {\n        expect(alt.nickname).to.be.equal('zsx_test');\n        done();\n      }\n    });\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fae41cca-a6ea-4d4e-9593-79d0bbf4294a",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "根据shopId: YhCNM6PqYrqTGMehh,查询4个",
            "fullTitle": "用户数据查询测试 根据shopId: YhCNM6PqYrqTGMehh,查询4个",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_Products2.default.model.find({ 'shopId': 'YhCNM6PqYrqTGMehh' }).skip(0).limit(4).exec(function (err, alt) {\n  console.log('188---------------------------------------------------');\n  if (!err) {\n    console.log(alt);\n    expect(alt.length).to.be.equal(4);\n    done();\n  } else {\n    console.log(err);\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2455a31f-adfe-45e0-b45c-4fac64d51abb",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "根据userId:AT7p7bspKthfSMx7Q,查询该用户的bankcard",
            "fullTitle": "用户数据查询测试 根据userId:AT7p7bspKthfSMx7Q,查询该用户的bankcard",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "_BankCard2.default.model.find({ 'userId': 'AT7p7bspKthfSMx7Q' }).exec(function (err, alt) {\n  console.log('201---------------------------------------------------');\n  if (!err) {\n    console.log(alt);\n    expect(alt.length).to.be.equal(2);\n    done();\n  } else {\n    console.log(err);\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "47606773-01a8-4ff3-b22b-2f0df64a25db",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "862c889b-afb3-4cc9-b74e-66ea40deefae",
          "bcf8012a-c2a9-4688-8cf6-83e4ba886f96",
          "d09b213b-73c9-4897-8d6c-19490ece665f",
          "8a21276f-a598-4959-b80e-b4383b87d143",
          "fed10d55-337a-4185-962b-e4614d402166",
          "de8c9eed-acb9-422d-a3a7-5a6cff0aca9a",
          "403b555f-c723-4d3c-a7c2-6c3e141a7875",
          "d2f393f7-df23-4e67-9087-96fc06e0a844",
          "738da14f-df5a-4680-90f3-cf606b24e46d",
          "ed6bc367-f11e-4531-ac73-f0f7c2a1d0e6",
          "fae41cca-a6ea-4d4e-9593-79d0bbf4294a",
          "2455a31f-adfe-45e0-b45c-4fac64d51abb",
          "47606773-01a8-4ff3-b22b-2f0df64a25db"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e40c8f2b-fcba-4e70-81be-4f7688bc9c89",
        "title": "测试所有用户的API",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "测试所有用户的API \"before all\" hook",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_axios2.default.get(\"http://127.0.0.1:7001/api/v1/get_token?uuid=\" + uuid).then(function (rlt) {\n  publicKey = rlt.data.publicKey;\n  sign = rlt.data.sign;\n  var randomString = rlt.data.randomString;\n  var msgCiphered = rlt.data.msgCiphered;\n  token = msgCiphered;\n  if (_ed2.default.Verify(Buffer.from(msgCiphered), Buffer.from(sign), Buffer.from(publicKey))) {\n    // 验证函数返回了true，通过验证\n    var msg = (0, _ciphers.decipher)('aes192', new Buffer(publicKey, 'utf8'), msgCiphered); //使用公钥解密\n    console.log(\"用户获得签名\");\n    expect(msg).to.be.equal(randomString);\n    done();\n  }\n}).catch(function (err) {\n  console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "10a7ecea-7967-4692-a7d6-e16570358cee",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "获取用户列表（简略信息）, 只有10条, 时间倒序",
            "fullTitle": "测试所有用户的API 获取用户列表（简略信息）, 只有10条, 时间倒序",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var userPromise = _axios2.default.get(\"http://localhost:7001/api/v1/users?uuid=\" + uuid + \"&token=\" + token);\nuserPromise.then(function (rlt) {\n  console.log(rlt.data);\n  var firtMoment = rlt.data[0].createdAt;\n  var secondMoment = rlt.data[1].createdAt;\n  var isUpdate = (0, _moment2.default)(firtMoment).isAfter((0, _moment2.default)(secondMoment));\n  expect(rlt.data.length).to.be.equal(10);\n  expect(isUpdate).to.be.equal(true);\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2887e531-cb05-4795-a3e4-37ab375ee859",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "创建一个用户testuser7791，加密密码test7791",
            "fullTitle": "测试所有用户的API 创建一个用户testuser7791，加密密码test7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "1684e09d-29d4-4792-a16d-a986e0d06abc",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "fullTitle": "测试所有用户的API 手机验证码创建或者登陆, 用户testuser8800, 若是创建需要用户设置密码, 密码为test8800",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "1f78536d-6c32-4ca2-84be-6ff2315209f9",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "2e9812cd-5fa5-4e9b-ad8d-7ad952ceb44e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "8b1d76d7-5639-4297-af30-815424a45b60",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "c1308ac2-7b84-44ed-a18a-669d6346143a",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "登出testuser8800",
            "fullTitle": "测试所有用户的API 登出testuser8800",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "fb2c1307-f73e-4783-91a8-45460a631b76",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查看testuser7791的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser7791的个人信息",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "9fe893a0-7e9d-467f-91ac-69f0136521e7",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "查看testuser8800的个人信息",
            "fullTitle": "测试所有用户的API 查看testuser8800的个人信息",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "f0511cf2-ef83-4ef8-9890-11d536349ed8",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "用户名密码登录testuser8800",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser8800",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "c4d6679b-ddfa-4f1b-916d-5568c0711e76",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "用户名密码登录testuser7791",
            "fullTitle": "测试所有用户的API 用户名密码登录testuser7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "9cb2a2f8-5bd7-4e13-8a2f-26bb00d56c50",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "修改testuser7791个人资料中的手机号，手机号为18820965455",
            "fullTitle": "测试所有用户的API 修改testuser7791个人资料中的手机号，手机号为18820965455",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "1a1d0ac7-1f06-4c8f-a062-dc7ca600424c",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "登出testuser7791",
            "fullTitle": "测试所有用户的API 登出testuser7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "d87cdca8-2a36-4fef-8ffd-4dee91282b09",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "手机号验证码登录testuser7791",
            "fullTitle": "测试所有用户的API 手机号验证码登录testuser7791",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "8695d0d0-01f5-4da5-9069-fa9ea5e3c475",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "2887e531-cb05-4795-a3e4-37ab375ee859",
          "1684e09d-29d4-4792-a16d-a986e0d06abc",
          "1f78536d-6c32-4ca2-84be-6ff2315209f9",
          "2e9812cd-5fa5-4e9b-ad8d-7ad952ceb44e",
          "8b1d76d7-5639-4297-af30-815424a45b60",
          "c1308ac2-7b84-44ed-a18a-669d6346143a",
          "fb2c1307-f73e-4783-91a8-45460a631b76",
          "9fe893a0-7e9d-467f-91ac-69f0136521e7",
          "f0511cf2-ef83-4ef8-9890-11d536349ed8",
          "c4d6679b-ddfa-4f1b-916d-5568c0711e76",
          "9cb2a2f8-5bd7-4e13-8a2f-26bb00d56c50",
          "1a1d0ac7-1f06-4c8f-a062-dc7ca600424c",
          "d87cdca8-2a36-4fef-8ffd-4dee91282b09",
          "8695d0d0-01f5-4da5-9069-fa9ea5e3c475"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4f941d57-382f-43f9-87e0-06a951332d85",
        "title": "测试订单支付状态，追踪更新",
        "fullFile": "/home/zhoushixiong/wan_server/test/index.js",
        "file": "/test/index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "验证最新更新的订单结果",
            "fullTitle": "测试订单支付状态，追踪更新 验证最新更新的订单结果",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_Order2.default.model.find({}, ['_id', 'userId', 'status', \"products\", \"user\", \"updatedAt\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    console.log(\"ORder\", rlt);\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "b20f8c6a-dd7e-4dd7-9c7f-7e233bccadc9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证店铺订单结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证店铺订单结果",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_ShopOrder2.default.model.find({}, [\"userId\", \"status\", \"shopId\", \"updatedAt\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    console.log(\"ShopOrder\", rlt);\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "823dcb71-a767-4829-b61c-210221b7737c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证账户结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证账户结果",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_Balance2.default.model.find({}, ['userId', \"createdAt\", \"orderId\", \"updatedAt\", \"amount\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    console.log(\"Balance\", rlt);\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "a969abbe-ec82-4027-9cc7-9bf8e63e1a23",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "在支付完成功后，验证收入结果",
            "fullTitle": "测试订单支付状态，追踪更新 在支付完成功后，验证收入结果",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "_BalanceIncome2.default.model.find({}, [\"reasonType\", \"amount\", \"updatedAt\", \"text\"], {\n    skip: 0,\n    limit: 10,\n    sort: {\n        updatedAt: -1\n    }\n}).then(function (rlt) {\n    console.log(\"BalanceIncome\", rlt);\n    expect(rlt).to.exist;\n    done();\n}).catch(function (err) {\n    console.log(err);\n});",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/zhoushixiong/wan_server/test/index.js)"
            },
            "isRoot": false,
            "uuid": "3e4611dd-4ffd-4d4c-b56e-e4ba7a929456",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "b20f8c6a-dd7e-4dd7-9c7f-7e233bccadc9",
          "823dcb71-a767-4829-b61c-210221b7737c",
          "a969abbe-ec82-4027-9cc7-9bf8e63e1a23",
          "3e4611dd-4ffd-4d4c-b56e-e4ba7a929456"
        ],
        "pending": [],
        "skipped": [],
        "duration": 8007,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}